
import glob
import os
import sys

try:
    sys.path.append(glob.glob('../carla/dist/carla-*%d.%d-%s.egg' % (
        sys.version_info.major,
        sys.version_info.minor,
        'win-amd64' if os.name == 'nt' else 'linux-x86_64'))[0])
except IndexError:
    pass

import carla
import random
import time
import numpy as np
# import cv2
import pygame 

im_width    = 640
im_height   = 480
white       = (255, 255, 255) 

client = carla.Client('localhost', 2000)
client.set_timeout(2.0)
world = client.get_world()
blueprint_library = world.get_blueprint_library()

def print_measurements():
    # measurements, sensor_data = client.read_data()
    # print(measurements)
    # control = measurements.player_measurements.autopilot_control
    # modify here control if wanted.
    # carla_client.send_control(control)
    t = vehicle.get_transform()
    v = vehicle.get_velocity()
    c = vehicle.get_control()
    print("Transform : ", t, " velocity : ", v, " control : ", c)


def process_img(image) : 
    # print(image)
    array = np.frombuffer(image.raw_data, dtype=np.dtype("uint8"))
    array = np.reshape(array, (im_height, im_width, 4))
    array = array[:, :, :3]
    array = array[:, :, ::-1]
    surface = pygame.surfarray.make_surface(array.swapaxes(0, 1))
    # print(surface)
    #####################################
    # pygame
    #####################################
    display_surface.blit(surface, (0, 0)) 
    pygame.display.update()  
    # image.save_to_disk('_out/%08d' % image.frame)

    print("test print measurements")
    print_measurements()

actor_list = []
try:
    
    
    ########################################
    #setup pygame
    ########################################
    pygame.init()
    display_surface = pygame.display.set_mode((im_width, im_height)) 
    pygame.display.set_caption('Image') 
    display_surface.fill(white) 
    
    ########################################
    #spawn a vehicle
    ########################################
    bp = blueprint_library.filter('model3')[0]
    spawn_point = random.choice(world.get_map().get_spawn_points())
    vehicle = world.spawn_actor(bp, spawn_point)
    # vehicle.set_autopilot(True)
    #vehicle.apply_control(carla.VehicleControl(throttle=1.0, steer=0.0))
    actor_list.append(vehicle)
    

    #########################################
    #attach a camera to the car
    ######################################### 
    # https://carla.readthedocs.io/en/latest/cameras_and_sensors
    # get the blueprint for this sensor
    blueprint = blueprint_library.find('sensor.camera.rgb')
    # change the dimensions of the image
    blueprint.set_attribute('image_size_x', '640')
    blueprint.set_attribute('image_size_y', '480')
    blueprint.set_attribute('fov', '110')

    # Provide the position of the sensor relative to the vehicle.
    transform = carla.Transform(carla.Location(x=0.8, z=1.7))
    # Tell the world to spawn the sensor, don't forget to attach it to your vehicle actor.
    sensor = world.spawn_actor(blueprint, transform, attach_to=vehicle)
    # Subscribe to the sensor stream by providing a callback function, this function is
    # called each time a new image is generated by the sensor.
    sensor.listen(lambda data: process_img(data))
    # add sensor to list of actors
    actor_list.append(sensor)

    print("vehicle transform : ", vehicle.get_transform())
    # vehicle.set_autopilot(True)

    # time.sleep(5)
    input("Press enter to exit client")
    for event in pygame.event.get() : 
        # if event object type is QUIT  then quitting the pygame and program both. 
        if event.type == pygame.QUIT : 
            # deactivates the pygame library 
            pygame.quit()   
            # quit the program. 
            quit() 
  
        

finally:

    print('destroying actors')
    for actor in actor_list:
        actor.destroy()
    print('done.')
